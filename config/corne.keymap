/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    combos {
        compatible = "zmk,combos";

        Layer3 {
            bindings = <&mo 3>;
            key-positions = <38 39>;
        };
    };

    behaviors {
        hml: homewrow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            hold-trigger-key-positions = <21 39 40 41 30 31 32 6 7 8 9 10 18 19 20 21 22 30 31 32 33 34 11 23 35>;
        };

        hmr: homewrow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
&kp ESCAPE  &kp Q  &kp W            &kp E                     &kp R                &kp T                       &kp Y                  &kp U                 &kp I                     &kp O             &kp P     &kp BSPC
&kp ENTER   &kp A  &hml LEFT_ALT S  &hml LEFT_GUI D           &hml LEFT_CONTROL F  &kp G                       &kp H                  &hmr RIGHT_CONTROL J  &hmr RIGHT_GUI K          &hmr LEFT_ALT L   &kp SEMI  &kp ENTER
&kp TAB     &kp Z  &kp X            &kp C                     &kp V                &kp B                       &kp N                  &kp M                 &kp COMMA                 &kp DOT           &kp FSLH  &kp RIGHT_SHIFT
                                    &mt LA(LS(LC(LGUI))) TAB  &lt 1 SPACE          &mt LEFT_SHIFT BACKSPACE    &mt RIGHT_SHIFT ENTER  &mt RIGHT_ALT SPACE   &mt LA(LS(LC(LGUI))) TAB
            >;
        };

        Nav {
            bindings = <
&kp LS(LC(LG(LA(NUMBER_3))))  &kp TAB                 &kp HOME      &kp UP        &kp END       &kp PAGE_UP      &kp KP_SLASH  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp LS(N)         &kp C_NEXT
&kp LS(LC(LG(LA(NUMBER_4))))  &kp LS(TAB)             &kp LEFT      &kp DOWN      &kp RIGHT     &kp PAGE_DOWN    &kp KP_MINUS  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_NUMBER_0   &kp C_PLAY_PAUSE
&kp LS(LA(LC(LG(NUMBER_2))))  &kp LGUI(AT)            &kp C_VOL_DN  &kp C_MUTE    &kp C_VOL_UP  &kp DEL          &kp DOT       &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp N             &kp C_PREV
                                                                    &trans        &trans        &trans           &trans        &trans           &trans
            >;
        };

        Settings {
            bindings = <
&none       &none         &none         &none         &none         &none           &ext_power EP_TOG  &sys_reset  &bootloader  &none            &none            &none
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &bl BL_TOG         &bl BL_INC  &bl BL_DEC   &rgb_ug RGB_TOG  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD
&none       &none         &none         &none         &none         &none           &none              &none       &none        &rgb_ug RGB_EFF  &rgb_ug RGB_EFR  &none
                                        &none         &none         &none           &none              &none       &none
            >;
        };
    };
};
